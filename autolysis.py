# -*- coding: utf-8 -*-
"""autolysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qIFuiMhfNG6BxTERBsDKAx5uLKxwixra
"""

import os
import sys
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import httpx
import chardet

# Constants
API_URL = "https://aiproxy.sanand.workers.dev/openai/v1/chat/completions"
AIPROXY_TOKEN = "eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6IjIzZjIwMDA1OTBAZHMuc3R1ZHkuaWl0bS5hYy5pbiJ9.kX5xjtFCGnivrfSatvDuvFFR5RPJ_jcDFB1XqaxfzW4"


def load_data(file_path):
    """Load CSV data with encoding detection."""
    try:
        with open(file_path, 'rb') as f:
            result = chardet.detect(f.read())
        encoding = result['encoding']
        return pd.read_csv(file_path, encoding=encoding)
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        sys.exit(1)
    except pd.errors.EmptyDataError:
        print(f"Error: File '{file_path}' is empty.")
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred while loading the file: {e}")
        sys.exit(1)


def analyze_data(df):
    """Perform basic data analysis."""
    try:
        numeric_df = df.select_dtypes(include=['number'])  # Select only numeric columns
        analysis = {
            'summary': df.describe(include='all').to_dict(),
            'missing_values': df.isnull().sum().to_dict(),
            'correlation': numeric_df.corr().to_dict()  # Compute correlation only on numeric columns
        }
        return analysis
    except Exception as e:
        print(f"An unexpected error occurred during data analysis: {e}")
        sys.exit(1)


def visualize_data(df):
    """Generate and save visualizations."""
    try:
        sns.set(style="whitegrid")
        numeric_columns = df.select_dtypes(include=['number']).columns
        for column in numeric_columns:
            plt.figure()
            sns.histplot(df[column].dropna(), kde=True)
            plt.title(f'Distribution of {column}')
            plt.savefig(f'{column}_distribution.png')
            plt.close()
        print("Visualizations saved successfully.")
    except Exception as e:
        print(f"An unexpected error occurred during visualization: {e}")
        sys.exit(1)


def generate_narrative(analysis):
    """Generate narrative using LLM."""
    headers = {
        'Authorization': f'Bearer {AIPROXY_TOKEN}',
        'Content-Type': 'application/json'
    }
    prompt = f"Provide a detailed analysis based on the following data summary: {analysis}"
    data = {
        "model": "gpt-4o-mini",
        "messages": [{"role": "user", "content": prompt}]
    }
    try:
        response = httpx.post(API_URL, headers=headers, json=data, timeout=30.0)
        response.raise_for_status()
        return response.json().get('choices', [{}])[0].get('message', {}).get('content', "No content returned.")
    except httpx.HTTPStatusError as e:
        print(f"HTTP error occurred: {e}")
    except httpx.RequestError as e:
        print(f"Request error occurred: {e}")
    except Exception as e:
        print(f"An unexpected error occurred during narrative generation: {e}")
    return "Narrative generation failed due to an error."


def main(file_path):
    df = load_data(file_path)
    print("Data loaded successfully.")
    analysis = analyze_data(df)
    print("Data analysis completed.")
    visualize_data(df)
    narrative = generate_narrative(analysis)
    with open('README.md', 'w') as f:
        f.write(narrative)
    print("Narrative generated and saved to README.md.")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python autolysis.py <dataset.csv>")
        sys.exit(1)
    main(sys.argv[1])
